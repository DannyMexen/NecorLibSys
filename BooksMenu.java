/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package necorlibsys;
import java.sql.*;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import static necorlibsys.PatronsMenu.JDBC_DRIVER;


/**
 *
 * @author mexen
 */
public class BooksMenu extends javax.swing.JDialog {
    // Database
    static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";
    static final String DB_URL = "jdbc:mysql://localhost/necorlibsys";
    
    static final String USER = "root";
    static final String PASS = "R00t.paribas";
    
    Date date;
    
    // Variables to work with
    String title; 
    String author;
    String isbn;
    String category;
    String insertBook;
    String bookID;
    String search;
    String patronDetails;
    String currentDate;
    String reserve;
    String reservationID;
    String collectionDate;
    String reservationDate;
    String reservationStatus;
    String cancelReservation;
    String bookStatus;
    String dateBorrowed;
    String dueDate;
    String availabilityDate;
    String patronID;
    String patron;
    String firstName;
    String initial;
    String lastName;
    String email;
    String checkOut;
    String daysDue;
    String penalty;
    String checkIn;
    String fiction = "Fiction";
    String nonFiction = "Non-Fiction";
    int status;
    int daysOverdue;
    int overdueRate = 5;
    int charge;
    
    Connection conn = null;
    Statement stmt = null;
    PreparedStatement pStmt = null;

    /**
     * Creates new form BooksMenu
     * @param parent
     * @param modal
     */
    public BooksMenu(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        date = new Date();
        currentDate = dateFormat.format(date);
        jFormattedCheckOutDate.setText(currentDate);
        jFormattedCheckOutReturnDate.setText("");
        
        status = 0;
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTextCheckInBookID = new javax.swing.JTextField();
        jButtonCheckInSearch = new javax.swing.JButton();
        jButtonCheckIn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel10 = new javax.swing.JLabel();
        jRadioCheckInOverdueYes = new javax.swing.JRadioButton();
        jRadioCheckInOverdueNo = new javax.swing.JRadioButton();
        jLabel11 = new javax.swing.JLabel();
        jTextDaysOverdue = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jTextPenalty = new javax.swing.JTextField();
        jFormattedCheckInReturnDate = new javax.swing.JFormattedTextField();
        jFormattedCheckInDateBorrowed = new javax.swing.JFormattedTextField();
        jTextCheckInPatID = new javax.swing.JTextField();
        jTextCheckInBorrower = new javax.swing.JTextField();
        jTextCheckInAuthor = new javax.swing.JTextField();
        jTextCheckInTitle = new javax.swing.JTextField();
        jButtonCheckInCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jTextCheckOutBookID = new javax.swing.JTextField();
        jButtonCheckOutSearch = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jTextCheckOutTitle = new javax.swing.JTextField();
        jTextCheckOutAuthor = new javax.swing.JTextField();
        jTextCheckOutPatID = new javax.swing.JTextField();
        jTextCheckOutBorrower = new javax.swing.JTextField();
        jFormattedCheckOutDate = new javax.swing.JFormattedTextField();
        jFormattedCheckOutReturnDate = new javax.swing.JFormattedTextField();
        jButtonCheckOut = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel25 = new javax.swing.JLabel();
        jRadioCheckOutYes = new javax.swing.JRadioButton();
        jRadioCheckOutNo = new javax.swing.JRadioButton();
        jButtonCheckOutCancel = new javax.swing.JButton();
        jButtonCheckOutPatronSearch = new javax.swing.JButton();
        jLabel28 = new javax.swing.JLabel();
        jFormattedCheckOutReservationDate = new javax.swing.JFormattedTextField();
        jLabel33 = new javax.swing.JLabel();
        jFormattedcheckOutAvailablility = new javax.swing.JFormattedTextField();
        jPanel6 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        jTextReservationBookID = new javax.swing.JTextField();
        jButtonReservationBookIDSearch = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jTextReservationTitle = new javax.swing.JTextField();
        jTextReservationAuthor = new javax.swing.JTextField();
        jFormattedReservationDateAvailable = new javax.swing.JFormattedTextField();
        jTextReservationPatID = new javax.swing.JTextField();
        jTextReservationPatron = new javax.swing.JTextField();
        jFormattedReservationDateCollection = new javax.swing.JFormattedTextField();
        jButtonReserve = new javax.swing.JButton();
        jButtonReservationCancel = new javax.swing.JButton();
        jButtonReservationPatronSearch = new javax.swing.JButton();
        jButtonReservationCancelReservation = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jButtonAddBook = new javax.swing.JButton();
        jTextBookTitle = new javax.swing.JTextField();
        jTextAuthor = new javax.swing.JTextField();
        jTextISBN = new javax.swing.JTextField();
        jButton15 = new javax.swing.JButton();
        jComboBoxCategory = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jTextEditBookID = new javax.swing.JTextField();
        jButtonBookEditSearch = new javax.swing.JButton();
        jTextEditTitle = new javax.swing.JTextField();
        jTextEditAuthor = new javax.swing.JTextField();
        jTextEditISBN = new javax.swing.JTextField();
        jButton10 = new javax.swing.JButton();
        jButtonBookEditCancel = new javax.swing.JButton();
        jComboBoxEditCategory = new javax.swing.JComboBox<>();
        jPanel5 = new javax.swing.JPanel();
        jLabel37 = new javax.swing.JLabel();
        jTextField27 = new javax.swing.JTextField();
        jButton11 = new javax.swing.JButton();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jTextField31 = new javax.swing.JTextField();
        jTextField32 = new javax.swing.JTextField();
        jTextField33 = new javax.swing.JTextField();
        jTextField34 = new javax.swing.JTextField();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/book.png"))); // NOI18N

        jLabel3.setText("Book ID:");

        jButtonCheckInSearch.setText("Search");
        jButtonCheckInSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCheckInSearchActionPerformed(evt);
            }
        });

        jButtonCheckIn.setText("Check-in");
        jButtonCheckIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCheckInActionPerformed(evt);
            }
        });

        jLabel4.setText("Book Title:");

        jLabel5.setText("Author:");

        jLabel6.setText("Borrowed By:");

        jLabel7.setText("Patron ID:");

        jLabel8.setText("Borrowed on:");

        jLabel9.setText("Return on:");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel10.setText("Overdue");

        buttonGroup1.add(jRadioCheckInOverdueYes);
        jRadioCheckInOverdueYes.setText("Yes");
        jRadioCheckInOverdueYes.setEnabled(false);

        buttonGroup1.add(jRadioCheckInOverdueNo);
        jRadioCheckInOverdueNo.setSelected(true);
        jRadioCheckInOverdueNo.setText("No");
        jRadioCheckInOverdueNo.setEnabled(false);

        jLabel11.setText("Days overdue:");

        jTextDaysOverdue.setEditable(false);
        jTextDaysOverdue.setText("0");

        jLabel12.setText("Penalty(ZMW):");

        jTextPenalty.setEditable(false);
        jTextPenalty.setText("0");
        jTextPenalty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextPenaltyActionPerformed(evt);
            }
        });

        jFormattedCheckInReturnDate.setEditable(false);

        jFormattedCheckInDateBorrowed.setEditable(false);

        jTextCheckInPatID.setEditable(false);
        jTextCheckInPatID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextCheckInPatIDActionPerformed(evt);
            }
        });

        jTextCheckInBorrower.setEditable(false);

        jTextCheckInAuthor.setEditable(false);

        jTextCheckInTitle.setEditable(false);

        jButtonCheckInCancel.setText("Cancel");
        jButtonCheckInCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCheckInCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextCheckInBorrower, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                            .addComponent(jTextCheckInAuthor)
                            .addComponent(jTextCheckInTitle)
                            .addComponent(jTextCheckInPatID, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextCheckInBookID, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonCheckInSearch))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jFormattedCheckInReturnDate, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                            .addComponent(jFormattedCheckInDateBorrowed))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonCheckIn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonCheckInCancel))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(110, 110, 110)
                                .addComponent(jTextDaysOverdue, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextPenalty, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel11)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRadioCheckInOverdueNo)
                                    .addComponent(jRadioCheckInOverdueYes))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jFormattedCheckInDateBorrowed, jFormattedCheckInReturnDate});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jTextCheckInAuthor, jTextCheckInBorrower, jTextCheckInTitle});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonCheckInSearch)
                            .addComponent(jTextCheckInBookID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jTextCheckInTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jTextCheckInAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jTextCheckInBorrower, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jTextCheckInPatID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jFormattedCheckInDateBorrowed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jFormattedCheckInReturnDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioCheckInOverdueYes)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioCheckInOverdueNo)
                                .addGap(24, 24, 24)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11)
                                    .addComponent(jTextDaysOverdue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(40, 40, 40)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel12)
                                    .addComponent(jTextPenalty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButtonCheckIn)
                                    .addComponent(jButtonCheckInCancel)))
                            .addComponent(jSeparator1))
                        .addContainerGap())))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jFormattedCheckInDateBorrowed, jFormattedCheckInReturnDate});

        jTabbedPane1.addTab("Check-in", jPanel1);

        jLabel13.setText("Book ID:");

        jButtonCheckOutSearch.setText("Search");
        jButtonCheckOutSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCheckOutSearchActionPerformed(evt);
            }
        });

        jLabel14.setText("Book Title:");

        jLabel15.setText("Author:");

        jLabel16.setText("Patron ID:");

        jLabel17.setText("Borrowed By:");

        jLabel18.setText("Date:");

        jLabel19.setText("Due Date:");

        jTextCheckOutTitle.setEditable(false);

        jTextCheckOutAuthor.setEditable(false);

        jTextCheckOutPatID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextCheckOutPatIDActionPerformed(evt);
            }
        });

        jTextCheckOutBorrower.setEditable(false);
        jTextCheckOutBorrower.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextCheckOutBorrowerActionPerformed(evt);
            }
        });

        jFormattedCheckOutDate.setEditable(false);
        jFormattedCheckOutDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFormattedCheckOutDateActionPerformed(evt);
            }
        });

        jFormattedCheckOutReturnDate.setEditable(false);

        jButtonCheckOut.setText("Check-out");
        jButtonCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCheckOutActionPerformed(evt);
            }
        });

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel25.setText("Existing Reservation");

        buttonGroup2.add(jRadioCheckOutYes);
        jRadioCheckOutYes.setText("Yes");
        jRadioCheckOutYes.setEnabled(false);
        jRadioCheckOutYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioCheckOutYesActionPerformed(evt);
            }
        });

        buttonGroup2.add(jRadioCheckOutNo);
        jRadioCheckOutNo.setSelected(true);
        jRadioCheckOutNo.setText("No");
        jRadioCheckOutNo.setEnabled(false);

        jButtonCheckOutCancel.setText("Cancel");
        jButtonCheckOutCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCheckOutCancelActionPerformed(evt);
            }
        });

        jButtonCheckOutPatronSearch.setText("Search");
        jButtonCheckOutPatronSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCheckOutPatronSearchActionPerformed(evt);
            }
        });

        jLabel28.setText("Reservation Date");

        jFormattedCheckOutReservationDate.setEditable(false);

        jLabel33.setText("Available on");

        jFormattedcheckOutAvailablility.setEditable(false);
        jFormattedcheckOutAvailablility.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFormattedcheckOutAvailablilityActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel19)
                    .addComponent(jLabel18)
                    .addComponent(jLabel17)
                    .addComponent(jLabel16)
                    .addComponent(jLabel15)
                    .addComponent(jLabel14)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextCheckOutTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                    .addComponent(jTextCheckOutAuthor)
                    .addComponent(jTextCheckOutBorrower)
                    .addComponent(jFormattedCheckOutReturnDate, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                    .addComponent(jFormattedCheckOutDate)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jTextCheckOutBookID, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonCheckOutSearch))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jTextCheckOutPatID, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(jButtonCheckOutPatronSearch)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 21, Short.MAX_VALUE)
                        .addComponent(jButtonCheckOut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonCheckOutCancel))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel25)
                            .addComponent(jRadioCheckOutNo)
                            .addComponent(jRadioCheckOutYes)
                            .addComponent(jLabel28)
                            .addComponent(jFormattedCheckOutReservationDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel33)
                            .addComponent(jFormattedcheckOutAvailablility, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jFormattedCheckOutDate, jFormattedCheckOutReservationDate, jFormattedCheckOutReturnDate, jFormattedcheckOutAvailablility});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel13)
                                    .addComponent(jTextCheckOutBookID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonCheckOutSearch))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel14)
                                    .addComponent(jTextCheckOutTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel15)
                                    .addComponent(jTextCheckOutAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel16)
                                    .addComponent(jTextCheckOutPatID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonCheckOutPatronSearch))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel17)
                                    .addComponent(jTextCheckOutBorrower, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel18)
                                    .addComponent(jFormattedCheckOutDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel19)
                                    .addComponent(jFormattedCheckOutReturnDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel25)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jRadioCheckOutYes)
                                .addGap(17, 17, 17)
                                .addComponent(jRadioCheckOutNo)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel28)
                                .addGap(18, 18, 18)
                                .addComponent(jFormattedCheckOutReservationDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel33)
                                .addGap(18, 18, 18)
                                .addComponent(jFormattedcheckOutAvailablility, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButtonCheckOut)
                                    .addComponent(jButtonCheckOutCancel))))
                        .addContainerGap())))
        );

        jTabbedPane1.addTab("Check-out", jPanel2);

        jLabel20.setText("Book ID:");

        jButtonReservationBookIDSearch.setText("Search");
        jButtonReservationBookIDSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReservationBookIDSearchActionPerformed(evt);
            }
        });

        jLabel21.setText("Book Title:");

        jLabel22.setText("Author");

        jLabel23.setText("Availability:");

        jLabel24.setText("Patron ID:");

        jLabel26.setText("Reserved by:");

        jLabel27.setText("Collection Date:");

        jTextReservationTitle.setEditable(false);
        jTextReservationTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextReservationTitleActionPerformed(evt);
            }
        });

        jTextReservationAuthor.setEditable(false);

        jFormattedReservationDateAvailable.setEditable(false);

        jTextReservationPatID.setEditable(false);

        jTextReservationPatron.setEditable(false);

        jFormattedReservationDateCollection.setEditable(false);

        jButtonReserve.setText("Reserve");
        jButtonReserve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReserveActionPerformed(evt);
            }
        });

        jButtonReservationCancel.setText("Cancel");
        jButtonReservationCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReservationCancelActionPerformed(evt);
            }
        });

        jButtonReservationPatronSearch.setText("Search");
        jButtonReservationPatronSearch.setEnabled(false);
        jButtonReservationPatronSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReservationPatronSearchActionPerformed(evt);
            }
        });

        jButtonReservationCancelReservation.setText("Clear Reservation");
        jButtonReservationCancelReservation.setEnabled(false);
        jButtonReservationCancelReservation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReservationCancelReservationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextReservationBookID, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonReservationBookIDSearch))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel26)
                            .addComponent(jLabel27)
                            .addComponent(jLabel24)
                            .addComponent(jLabel23)
                            .addComponent(jLabel22)
                            .addComponent(jLabel21))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextReservationTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                                    .addComponent(jTextReservationAuthor)
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addComponent(jTextReservationPatID, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButtonReservationPatronSearch))
                                    .addComponent(jTextReservationPatron)
                                    .addComponent(jFormattedReservationDateAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jFormattedReservationDateCollection, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                                .addComponent(jButtonReservationCancelReservation)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addComponent(jButtonReserve)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonReservationCancel)
                .addContainerGap())
        );

        jPanel6Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jFormattedReservationDateAvailable, jFormattedReservationDateCollection});

        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(jTextReservationBookID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonReservationBookIDSearch))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(jTextReservationTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(jTextReservationAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(jFormattedReservationDateAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(jTextReservationPatID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonReservationPatronSearch))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(jTextReservationPatron, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(jFormattedReservationDateCollection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonReserve)
                    .addComponent(jButtonReservationCancel)
                    .addComponent(jButtonReservationCancelReservation))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Reservations", jPanel6);

        jLabel29.setText("Book Title:");
        jLabel29.setToolTipText("");

        jLabel30.setText("Author:");

        jLabel31.setText("ISBN:");

        jLabel32.setText("Category:");
        jLabel32.setToolTipText("The genre of the book");

        jButtonAddBook.setText("Add");
        jButtonAddBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddBookActionPerformed(evt);
            }
        });

        jTextAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextAuthorActionPerformed(evt);
            }
        });

        jButton15.setText("Cancel");

        jComboBoxCategory.setMaximumRowCount(2);
        jComboBoxCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fiction", "Non-Fiction" }));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel32)
                    .addComponent(jLabel31)
                    .addComponent(jLabel30)
                    .addComponent(jLabel29))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jTextBookTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                        .addComponent(jTextAuthor)
                        .addComponent(jTextISBN, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jComboBoxCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(188, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonAddBook)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton15)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(jTextBookTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(jTextAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(jTextISBN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32)
                    .addComponent(jComboBoxCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 153, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton15)
                    .addComponent(jButtonAddBook))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Add book", jPanel3);

        jLabel34.setText("Book ID:");

        jLabel35.setText("Book Title:");

        jLabel36.setText("Author:");

        jLabel38.setText("ISBN:");

        jLabel39.setText("Category:");

        jButtonBookEditSearch.setText("Search");
        jButtonBookEditSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBookEditSearchActionPerformed(evt);
            }
        });

        jTextEditTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextEditTitleActionPerformed(evt);
            }
        });

        jTextEditISBN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextEditISBNActionPerformed(evt);
            }
        });

        jButton10.setText("Save");

        jButtonBookEditCancel.setText("Cancel");
        jButtonBookEditCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBookEditCancelActionPerformed(evt);
            }
        });

        jComboBoxEditCategory.setMaximumRowCount(2);
        jComboBoxEditCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fiction", "Non-Fiction" }));
        jComboBoxEditCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxEditCategoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel35)
                    .addComponent(jLabel36)
                    .addComponent(jLabel38)
                    .addComponent(jLabel39)
                    .addComponent(jLabel34))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jTextEditBookID, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonBookEditSearch))
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jTextEditTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                        .addComponent(jTextEditAuthor)
                        .addComponent(jTextEditISBN, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jComboBoxEditCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(191, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonBookEditCancel)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34)
                    .addComponent(jTextEditBookID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBookEditSearch))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel35)
                    .addComponent(jTextEditTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(jTextEditAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel38)
                    .addComponent(jTextEditISBN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel39)
                    .addComponent(jComboBoxEditCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton10)
                    .addComponent(jButtonBookEditCancel))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Edit book", jPanel4);

        jLabel37.setText("Book ID:");

        jButton11.setText("Search");

        jLabel41.setText("Book Title:");

        jLabel42.setText("Author");

        jLabel43.setText("ISBN:");

        jLabel44.setText("Category:");

        jTextField31.setEditable(false);

        jTextField32.setEditable(false);
        jTextField32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField32ActionPerformed(evt);
            }
        });

        jTextField33.setEditable(false);

        jTextField34.setEditable(false);

        jButton12.setText("Cancel");

        jButton13.setText("Delete");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel44)
                    .addComponent(jLabel43)
                    .addComponent(jLabel42)
                    .addComponent(jLabel41)
                    .addComponent(jLabel37))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jTextField27, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton11))
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jTextField33, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField34, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField31, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                        .addComponent(jTextField32)))
                .addContainerGap(191, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton12)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37)
                    .addComponent(jTextField27, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton11))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel41)
                    .addComponent(jTextField31, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel42)
                    .addComponent(jTextField32, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel43)
                    .addComponent(jTextField33, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel44)
                    .addComponent(jTextField34, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton12)
                    .addComponent(jButton13))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Delete book", jPanel5);

        jLabel2.setText("Manage books");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Check-In Tab
    // Finish will save changes and clear all fields (dialog notifying user of the same)
    private void jButtonCheckInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCheckInActionPerformed
        // TODO add your handling code here:
        
        // If a book ID has not been entered, warn the user
        if((jTextCheckInBookID.getText().isEmpty())){
        int warning = JOptionPane.showConfirmDialog(null, "Please enter an ID.", "Attention.",
        JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);
        }
        else {
            bookID = jTextCheckInBookID.getText();
            bookStatus = "Checked-in";  
            
        JDialog.setDefaultLookAndFeelDecorated(true);
        int response = JOptionPane.showConfirmDialog(null, "Check-in this book?", "Confirm",
        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        
        // close dialog if no
        if (response == JOptionPane.NO_OPTION) {
            JOptionPane.getRootFrame().dispose();
            
        // edit the patron if yes
        } else if (response == JOptionPane.YES_OPTION) {
                
            checkIn = "UPDATE book SET book_status = ? WHERE book_id = ?";
        
        try{
        Class.forName(JDBC_DRIVER);
        }catch(ClassNotFoundException e){}
        try{
        
        conn = DriverManager.getConnection(DB_URL, USER, PASS);
        pStmt = conn.prepareStatement(checkIn);
        
        // update the record
        
        pStmt.setString(1, bookStatus);
        pStmt.setString(2, bookID);
        
        pStmt.executeUpdate();
        conn.close();
            } catch(SQLException se){}
        
        jTextCheckInBookID.setText("");
        jTextCheckInTitle.setText("");
        jTextCheckInAuthor.setText("");
        jTextCheckInBorrower.setText("");
        jTextCheckInPatID.setText("");
        jRadioCheckInOverdueNo.setSelected(true);
        jTextDaysOverdue.setText("");
        jTextPenalty.setText("");
        jFormattedCheckInDateBorrowed.setText("");
        jFormattedCheckInReturnDate.setText("");
        }    
        } 
    }//GEN-LAST:event_jButtonCheckInActionPerformed

    private void jTextPenaltyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextPenaltyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextPenaltyActionPerformed

    private void jTextCheckOutBorrowerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextCheckOutBorrowerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextCheckOutBorrowerActionPerformed

    private void jTextCheckOutPatIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextCheckOutPatIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextCheckOutPatIDActionPerformed

    private void jTextCheckInPatIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextCheckInPatIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextCheckInPatIDActionPerformed

    // Set the current date
    private void jFormattedCheckOutDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFormattedCheckOutDateActionPerformed
        // TODO add your handling code here:
        /*DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date date = new Date();
        currentDate = dateFormat.format(date);
        jFormattedCheckOutDate.setText(currentDate);
        */
    }//GEN-LAST:event_jFormattedCheckOutDateActionPerformed

    private void jTextEditTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextEditTitleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextEditTitleActionPerformed

    private void jTextEditISBNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextEditISBNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextEditISBNActionPerformed

    private void jTextField32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField32ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField32ActionPerformed

    private void jTextAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextAuthorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextAuthorActionPerformed
    
    // Add button inserts the new record to the database
    private void jButtonAddBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddBookActionPerformed
        // TODO add your handling code here:
        title = jTextBookTitle.getText();
        author = jTextAuthor.getText();
        isbn = jTextISBN.getText();
        if(jComboBoxCategory.getSelectedItem().equals(fiction)){
            category = fiction;
        } else {
            category = nonFiction;
        }
        
        insertBook = "INSERT INTO book"+
                "(title,author,isbn,category)"+
                "VALUES"+
                "(\'"+title+"\',"+"\'"+author+"\',"+"\'"+isbn+"\',"+"\'"+category+"\')";
        
        try{
        Class.forName(JDBC_DRIVER);
        }catch(ClassNotFoundException e){}
        try{
        conn = DriverManager.getConnection(DB_URL, USER, PASS);
        stmt = conn.createStatement();
        
        //warn user to enter something if field is empty
        if ((title.isEmpty() || author.isEmpty()) || (isbn.isEmpty() || category.isEmpty())){
           int warning = JOptionPane.showConfirmDialog(null, "Enter missing values.", "Warning",
            JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);
        }
        
        else {
        // Prompt the user
        JDialog.setDefaultLookAndFeelDecorated(true);
        int response = JOptionPane.showConfirmDialog(null, "Add this book?", "Confirm",
        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        
        // close dialog if no
        if (response == JOptionPane.NO_OPTION) {
            JOptionPane.getRootFrame().dispose();
            
        // add book if yes
        } else if (response == JOptionPane.YES_OPTION) {
        
        // insert the record
        stmt.executeUpdate(insertBook);
        
        // clear the text fields
        jTextBookTitle.setText("");
        jTextAuthor.setText("");
        jTextISBN.setText("");
       // jTextCategory.setText("");

        } 
            
        }  
        
        }catch(SQLException se){}
        
       
    }//GEN-LAST:event_jButtonAddBookActionPerformed

    private void jButtonCheckOutCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCheckOutCancelActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButtonCheckOutCancelActionPerformed

    private void jComboBoxEditCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxEditCategoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxEditCategoryActionPerformed

    private void jButtonCheckInSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCheckInSearchActionPerformed
        // TODO add your handling code here:
        // Search for a record to check-in
        
        jTextCheckInTitle.setText("");
        jTextCheckInAuthor.setText("");
        jTextCheckInBorrower.setText("");
        jTextCheckInPatID.setText("");
        jFormattedCheckInDateBorrowed.setText("");
        jFormattedCheckInReturnDate.setText("");
        jTextDaysOverdue.setText("0");
        jTextPenalty.setText("0");
        
        DateFormat df;
        df = new SimpleDateFormat("yyyy-MM-dd");
        
        try{
        Class.forName(JDBC_DRIVER);
        }catch(ClassNotFoundException e){}
        try{
        conn = DriverManager.getConnection(DB_URL, USER, PASS);
        stmt = conn.createStatement();
        bookID = jTextCheckInBookID.getText();
        
        
        //warn user if ID has not been entered
        if(bookID.isEmpty()){ 
           int warning = JOptionPane.showConfirmDialog(null, "Please enter an ID.", "Attention.",
            JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);
        }
        else{
                
        search = "SELECT * FROM book WHERE book_id = " + bookID + " ";
        
        ResultSet rs = stmt.executeQuery(search);
        
        
       
        
        while(rs.next()){
        jTextCheckInTitle.setText(rs.getString("title"));
        jTextCheckInAuthor.setText(rs.getString("author"));
        bookStatus = rs.getString("book_status");
        
        
        if (bookStatus.equals("Checked-in")){
            int warning = JOptionPane.showConfirmDialog(null, "This book has already been checked-in.", "Attention.",
            JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);
            jTextCheckInBookID.setText("");
            break;
        } else {
        
        patronID = String.valueOf(rs.getInt("patron_patron_id"));     
        patronDetails = "SELECT * FROM patron WHERE patron_id = " + patronID + " ";
        rs = stmt.executeQuery(patronDetails);
        
        while(rs.next()){
        
        // Patron ID and name - grab e-mail
        jTextCheckInPatID.setText(rs.getString("patron_id"));
        initial = rs.getString("initial");
        if ((initial == null) || (initial.equals(""))){
            jTextCheckInBorrower.setText(rs.getString("first_name") + " " + rs.getString("last_name"));
        } else {
            jTextCheckInBorrower.setText(rs.getString("first_name") + " " + rs.getString("initial") + ". " + rs.getString("last_name"));
        }
       
        email = rs.getString("email");
        
        } // end inner while for name
        
        rs = stmt.executeQuery(search);
        
        while(rs.next()){
        // Dates
         Date borrowedOn = rs.getDate("borrow_date");
         Date returnOn = rs.getDate("return_date");
         Date today = df.parse(currentDate);
             
            dateBorrowed = df.format(borrowedOn);
            dueDate = df.format(returnOn);
            jFormattedCheckInDateBorrowed.setText(dateBorrowed);
            jFormattedCheckInReturnDate.setText(dueDate);
          
          // if the book is overdue
            
            long days = (today.getTime() - returnOn.getTime()) / (24 * 60 * 60 * 1000);
            daysOverdue = (int) days;
            charge = daysOverdue * 5;
            daysDue = String.valueOf(days);
            penalty = String.valueOf(charge);
            
            
            
            if (daysOverdue >= 1){
                jRadioCheckInOverdueYes.setSelected(true);
                jTextDaysOverdue.setText(daysDue);
                jTextPenalty.setText(penalty);
            }  
            
        } // end inner while for dates and overdue calculation plus
        } // end else
        
        } // end while
        
        
        String test = jTextCheckInTitle.getText();
        if(test.isEmpty()){ 
           int warning = JOptionPane.showConfirmDialog(null, "No record found.", "Attention.",
            JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);
           
           status = 1;
        }
        
        
        
        }
        conn.close();
        
        
        }catch(SQLException se){} catch (ParseException ex) {
            Logger.getLogger(BooksMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonCheckInSearchActionPerformed

    private void jButtonCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCheckOutActionPerformed
        // TODO add your handling code here:
        
        
        if((jTextCheckOutBookID.getText().isEmpty()) || (jTextCheckOutPatID.getText().isEmpty())){
        int warning = JOptionPane.showConfirmDialog(null, "Please enter ID(s).", "Attention.",
        JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);
        }
        
        else if((jTextCheckOutTitle.getText().isEmpty()) && (!((jTextCheckOutBookID.getText().isEmpty()) || (jTextCheckOutPatID.getText().isEmpty())))){
            int warning = JOptionPane.showConfirmDialog(null, "Nothing to check-out.", "Attention.",
        JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);
        }
        
        else {
            JDialog.setDefaultLookAndFeelDecorated(true);
        int response = JOptionPane.showConfirmDialog(null, "Check-out this book?", "Confirm",
        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        
        // close dialog if no
        if (response == JOptionPane.NO_OPTION) {
            JOptionPane.getRootFrame().dispose();
            
        // edit the patron if yes
        } else if (response == JOptionPane.YES_OPTION) {
            bookStatus = "Checked-out";
            patronID = jTextCheckOutPatID.getText();
            
            // Dates 
            
            currentDate = jFormattedCheckOutDate.getText();
            dueDate = jFormattedCheckOutReturnDate.getText();
        
            checkOut = "UPDATE book SET book_status = ?, patron_patron_id = ?, borrow_date = ?, return_date = ? WHERE book_id = ?";
        
        try{
        Class.forName(JDBC_DRIVER);
        }catch(ClassNotFoundException e){}
        try{
        conn = DriverManager.getConnection(DB_URL, USER, PASS);
        stmt = conn.createStatement();
        pStmt = conn.prepareStatement(checkOut);
        // update the record
        
        
        pStmt.setString(1, bookStatus);
        pStmt.setString(2, patronID);
        pStmt.setString(3, currentDate);
        pStmt.setString(4, dueDate); 
        pStmt.setString(5, bookID);
        
        pStmt.executeUpdate();
        conn.close();
            } catch(SQLException se){}
        
        jTextCheckOutBookID.setText("");
        jTextCheckOutTitle.setText("");
        jTextCheckOutAuthor.setText("");
        jTextCheckOutBorrower.setText("");
        jTextCheckOutPatID.setText("");
        jFormattedCheckOutReservationDate.setText("");
        jFormattedcheckOutAvailablility.setText("");
        jFormattedCheckOutReturnDate.setText("");
        reservationStatus = "N";
        jRadioCheckOutNo.setSelected(true);
        
        }    
        }   
    }//GEN-LAST:event_jButtonCheckOutActionPerformed
    // end check-out
    private void jButtonCheckOutSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCheckOutSearchActionPerformed
        // TODO add your handling code here:
        // Search for a record to check-out
        
        jTextCheckOutTitle.setText("");
        jTextCheckOutAuthor.setText("");
        jTextCheckOutBorrower.setText("");
        jTextCheckOutPatID.setText("");
        jFormattedCheckOutReservationDate.setText("");
        jFormattedcheckOutAvailablility.setText("");
        jFormattedCheckOutReturnDate.setText("");
        reservationStatus = "N";
        jRadioCheckOutNo.setSelected(true);
        
        // date
        DateFormat df;
        df = new SimpleDateFormat("yyyy-MM-dd");
        
        
        
        try{
        Class.forName(JDBC_DRIVER);
        }catch(ClassNotFoundException e){}
        try{
        conn = DriverManager.getConnection(DB_URL, USER, PASS);
        stmt = conn.createStatement();
        bookID = jTextCheckOutBookID.getText();
        
        
        //warn user if ID has not been entered
        if(bookID.isEmpty()){ 
           int warning = JOptionPane.showConfirmDialog(null, "Please enter an ID.", "Attention.",
            JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);
              
        }
        else{
                
        search = "SELECT * FROM book WHERE book_id = " + bookID + " ";
        ResultSet rs = stmt.executeQuery(search);
        
        while(rs.next()){
        jTextCheckOutTitle.setText(rs.getString("title"));
        jTextCheckOutAuthor.setText(rs.getString("author"));
        bookStatus = rs.getString("book_status");
        reservationStatus = rs.getString("reserved");
        
        
        if(bookStatus.equals("Checked-out")){
            dueDate = df.format(rs.getDate("return_date"));
            jFormattedcheckOutAvailablility.setText(dueDate);
            int warning = JOptionPane.showConfirmDialog(null, "This book is unavailable for check-out.", "Attention.",
            JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE); 
            jTextCheckOutBookID.setText("");
            
            break;
            
        }
     
              
        // if book is reserved, show in radio button group
        if (reservationStatus.equals("Y")){
           jRadioCheckOutYes.setSelected(true);
           reservationDate = df.format(rs.getDate("reservation_date"));
           availabilityDate = df.format(rs.getDate("availability"));
           jFormattedCheckOutReservationDate.setText(reservationDate);
           reservationStatus = "N";
           
           jFormattedcheckOutAvailablility.setText(availabilityDate);
           
           if(currentDate.equals(reservationDate)){
               jTextCheckOutPatID.setEnabled(false);
               jButtonCheckOutPatronSearch.setEnabled(false);
               jTextCheckOutBorrower.setEnabled(false);
               jFormattedCheckOutReturnDate.setEnabled(false);
               jButtonCheckOut.setEnabled(false);
           }
        } 
        
        
        
        } // end while
        
        
        
       String test = jTextCheckOutTitle.getText();
        if(test.isEmpty()){ 
           int warning = JOptionPane.showConfirmDialog(null, "No record found.", "Attention.",
            JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);
           jTextCheckOutBookID.setText("");
           status = 1;
        }
        
        
        
        
        
        }
        conn.close();
        
        
        }catch(SQLException se){}
        
    }//GEN-LAST:event_jButtonCheckOutSearchActionPerformed

    private void jRadioCheckOutYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioCheckOutYesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioCheckOutYesActionPerformed

    private void jButtonCheckOutPatronSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCheckOutPatronSearchActionPerformed
        // TODO add your handling code here:
        // Search for a record to check-out
        
        //initialize text fields here
         jTextCheckOutBorrower.setText("");
        
        
        try{
        Class.forName(JDBC_DRIVER);
        }catch(ClassNotFoundException e){}
        try{
        conn = DriverManager.getConnection(DB_URL, USER, PASS);
        stmt = conn.createStatement();
        patronID = jTextCheckOutPatID.getText();
        
        
        //warn user if ID has not been entered
        if(patronID.isEmpty()){ 
           int warning = JOptionPane.showConfirmDialog(null, "Please enter an ID.", "Attention.",
            JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);
        }
        else{
                
        search = "SELECT * FROM patron WHERE patron_id = " + patronID + " ";
        ResultSet rs = stmt.executeQuery(search);
        
        while(rs.next()){
            if ((rs.getString("initial") == null) || (rs.getString("initial").equals(""))){
                patron = (rs.getString("first_name")) + " " + (rs.getString("last_name"));
            } else {
        patron = (rs.getString("first_name")) + " " + (rs.getString("initial")) + ". " + (rs.getString("last_name"));
            }
            jTextCheckOutBorrower.setText(patron);
        
        } // end while
        
        
        
        String test = jTextCheckOutBorrower.getText();
        if(test.isEmpty()){ 
           int warning = JOptionPane.showConfirmDialog(null, "No record found.", "Attention.",
            JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);
           
           status = 1;
        } else {
            if(!(reservationDate.isEmpty())){
                jFormattedCheckOutReturnDate.setText(reservationDate);
            }
            else{
            SimpleDateFormat formattedDate = new SimpleDateFormat("yyyy-MM-dd");            
            Calendar c = Calendar.getInstance();        
            c.add(Calendar.DATE, 2);  // number of days to add      
            dueDate = (String)(formattedDate.format(c.getTime()));
            jFormattedCheckOutReturnDate.setText(dueDate);
            }
        }      
        
        }
        conn.close();
        
        
        }catch(SQLException se){}
    }//GEN-LAST:event_jButtonCheckOutPatronSearchActionPerformed

    private void jFormattedcheckOutAvailablilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFormattedcheckOutAvailablilityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFormattedcheckOutAvailablilityActionPerformed

    private void jButtonCheckInCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCheckInCancelActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButtonCheckInCancelActionPerformed

    private void jButtonReservationCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReservationCancelActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButtonReservationCancelActionPerformed

    private void jButtonReservationBookIDSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReservationBookIDSearchActionPerformed
        // TODO add your handling code here:
        // First, search for the book
        // Search for a record to check-out
        
        
        jTextReservationTitle.setText("");
        jTextReservationAuthor.setText("");
        jFormattedReservationDateAvailable.setText("");
        //jTextReservationPatID.setText("");
        //jTextReservationPatron.setText("");
        jFormattedCheckOutReservationDate.setText("");
        jFormattedReservationDateCollection.setText("");
        jTextReservationPatID.setEditable(false);
        jButtonReservationPatronSearch.setEnabled(false);
        reservationStatus = "N";
        
        // date
        DateFormat df;
        df = new SimpleDateFormat("yyyy-MM-dd");
        Date available, collect;
        
        
        
        try{
        Class.forName(JDBC_DRIVER);
        }catch(ClassNotFoundException e){}
        try{
        conn = DriverManager.getConnection(DB_URL, USER, PASS);
        stmt = conn.createStatement();
        bookID = jTextReservationBookID.getText();
        
        
        //warn user if ID has not been entered
        if(bookID.isEmpty()){ 
           int warning = JOptionPane.showConfirmDialog(null, "Please enter an ID.", "Attention.",
            JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);
              
        }
        else{
                
        search = "SELECT * FROM book WHERE book_id = " + bookID + " ";
        
        ResultSet rs = stmt.executeQuery(search);
        
        while(rs.next()){
        jTextReservationTitle.setText(rs.getString("title"));
        jTextReservationAuthor.setText(rs.getString("author"));
        bookStatus = rs.getString("book_status");
        reservationStatus = rs.getString("reserved");
        
        if (reservationStatus.equals("Y")){
            
            
            jTextReservationPatID.setEditable(false);
            jButtonReservationPatronSearch.setEnabled(false);
            jButtonReserve.setEnabled(false);
            jButtonReservationCancelReservation.setEnabled(true);
            
            available = rs.getDate("availability");
            collect = rs.getDate("reservation_date");
            
            availabilityDate = df.format(available);
            reservationDate = df.format(collect);
            
            jFormattedReservationDateAvailable.setText(availabilityDate);
            jFormattedReservationDateCollection.setText(reservationDate);
            
            //int ID = rs.getInt("patron_patron_id");
            patronID = String.valueOf(rs.getInt("patron_patron_id"));
            patronDetails = "SELECT * FROM patron WHERE patron_id = " + patronID + " ";
            rs = stmt.executeQuery(patronDetails);
                while(rs.next()){
                    jTextReservationPatID.setText(patronID);
                    firstName = rs.getString("first_name");
                    initial = rs.getString("initial");
                    lastName = rs.getString("last_name");
                    
                    if ((initial.isEmpty()) || (initial == null)){
                        jTextReservationPatron.setText(firstName + " " + lastName);
                    } else {
                        jTextReservationPatron.setText(firstName + " " + initial + ". " + lastName);
                    }
                    
                } // end patron details while
                
              
        } else if (reservationStatus.equals("N")) { // end if book has already been checked-out
            
            jButtonReservationCancelReservation.setEnabled(false);
            jButtonReservationPatronSearch.setEnabled(true);
            jTextReservationPatID.setEditable(true);
            jButtonReservationPatronSearch.setEnabled(true);
            jButtonReserve.setEnabled(true);
            bookID = jTextReservationBookID.getText();
            search = "SELECT * FROM book WHERE book_id = " + bookID + " ";
            rs = stmt.executeQuery(search);
            while (rs.next()){
                bookStatus = rs.getString("book_status");
            
            if(bookStatus.equals("Checked-out")){
                // change the date
                available = rs.getDate("return_date");
                availabilityDate = df.format(available);
                jFormattedReservationDateAvailable.setText(availabilityDate);
                jFormattedReservationDateCollection.setText(availabilityDate);
            }
            
            else if (bookStatus.equals("Checked-in")){
                jFormattedReservationDateAvailable.setText("Today");
                
                // Add 2 days to collection date
                SimpleDateFormat formattedDate = new SimpleDateFormat("yyyy-MM-dd");            
                Calendar c = Calendar.getInstance();        
                c.add(Calendar.DATE, 2);  // number of days to add      
                reservationDate = (String)(formattedDate.format(c.getTime()));
      
                jFormattedReservationDateCollection.setText(reservationDate);
                
            }
            }
            
        }

        
        
        
        
        
        } // end while
        
        
        
       String test = jTextReservationTitle.getText();
        if(test.isEmpty()){ 
           int warning = JOptionPane.showConfirmDialog(null, "No record found.", "Attention.",
            JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);
            jTextReservationPatID.setText("");
            jTextReservationPatron.setText("");
           status = 1;
        }
        
        
        
        
        
        }
        conn.close();
        
        
        }catch(SQLException se){}
      
    }//GEN-LAST:event_jButtonReservationBookIDSearchActionPerformed

    private void jTextReservationTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextReservationTitleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextReservationTitleActionPerformed

    private void jButtonReservationPatronSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReservationPatronSearchActionPerformed
        // TODO add your handling code here:
        // Search for a patron to reserve the book
        
        //initialize text fields here
         jTextReservationPatron.setText("");
        
        
        try{
        Class.forName(JDBC_DRIVER);
        }catch(ClassNotFoundException e){}
        try{
        conn = DriverManager.getConnection(DB_URL, USER, PASS);
        stmt = conn.createStatement();
        patronID = jTextReservationPatID.getText();
        
        
        //warn user if ID has not been entered
        if(patronID.isEmpty()){ 
           int warning = JOptionPane.showConfirmDialog(null, "Please enter an ID.", "Attention.",
            JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);
        }
         
        else{
                
        search = "SELECT * FROM patron WHERE patron_id = " + patronID + " ";
        ResultSet rs = stmt.executeQuery(search);
        
        while(rs.next()){
            if ((rs.getString("initial") == null) || (rs.getString("initial").equals(""))){
                patron = (rs.getString("first_name")) + " " + (rs.getString("last_name"));
            } else {
        patron = (rs.getString("first_name")) + " " + (rs.getString("initial")) + ". " + (rs.getString("last_name"));
            }
            jTextReservationPatron.setText(patron);
        
        } // end while
        
        
        
        String test = jTextReservationPatron.getText();
        if(test.isEmpty()){ 
           int warning = JOptionPane.showConfirmDialog(null, "No record found.", "Attention.",
            JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);
            jTextReservationPatID.setText("");
            jTextReservationPatron.setText("");
           status = 1;
        }     
        
        }
        conn.close();
        
        
        }catch(SQLException se){}
        
    }//GEN-LAST:event_jButtonReservationPatronSearchActionPerformed

    private void jButtonReserveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReserveActionPerformed
        // TODO add your handling code here:
        // check for empty IDs
        
        if((jTextReservationBookID.getText().isEmpty()) || (jTextReservationPatID.getText().isEmpty())){
        int warning = JOptionPane.showConfirmDialog(null, "Please enter ID(s).", "Attention.",
        JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);
        }
        
        else if((jTextReservationTitle.getText().isEmpty()) && (!((jTextReservationBookID.getText().isEmpty()) || (jTextCheckOutPatID.getText().isEmpty())))){
            int warning = JOptionPane.showConfirmDialog(null, "Nothing to Reserve.", "Attention.",
        JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);
        }
        
        else {
            JDialog.setDefaultLookAndFeelDecorated(true);
        int response = JOptionPane.showConfirmDialog(null, "Reserve this book?", "Confirm",
        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        
        // close dialog if no
        if (response == JOptionPane.NO_OPTION) {
            JOptionPane.getRootFrame().dispose();
            
        // edit the patron if yes
        } else if (response == JOptionPane.YES_OPTION) {
            bookID = jTextReservationBookID.getText();
            patronID = jTextReservationPatID.getText();
            reservationStatus = "Y";
            reservationID = patronID;
            reservationDate = jFormattedReservationDateCollection.getText();
            
            Date resDate;
            // add 3 days to the reservation date to get the availability date
            
                SimpleDateFormat formattedDate = new SimpleDateFormat("yyyy-MM-dd");
                try {
                    resDate = formattedDate.parse(reservationDate);
                    Calendar c = Calendar.getInstance(); 
                    c.setTime(resDate);
                    c.add(Calendar.DATE, 2);  // number of days to add      
                    availabilityDate = (String)(formattedDate.format(c.getTime()));
                } catch (ParseException ex) {
                    Logger.getLogger(BooksMenu.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            
        
            reserve = "UPDATE book SET reserved = ?, reservation_id = ?, reservation_date = ?, availability = ? WHERE book_id = ?";
        
        try{
        Class.forName(JDBC_DRIVER);
        }catch(ClassNotFoundException e){}
        try{
        conn = DriverManager.getConnection(DB_URL, USER, PASS);
        stmt = conn.createStatement();
        pStmt = conn.prepareStatement(reserve);
        // update the record
        
        
        pStmt.setString(1, reservationStatus);
        pStmt.setString(2, reservationID);
        pStmt.setString(3, reservationDate);
        pStmt.setString(4, availabilityDate); 
        pStmt.setString(5, bookID);
        
        pStmt.executeUpdate();
        conn.close();
            } catch(SQLException se){}
        
        jTextReservationBookID.setText("");
        jTextReservationTitle.setText("");
        jTextReservationAuthor.setText("");
        jTextReservationPatron.setText("");
        jTextReservationPatID.setText("");
        jFormattedReservationDateCollection.setText("");
        reservationStatus = "N";
        
        
        }    
        }  
        
    }//GEN-LAST:event_jButtonReserveActionPerformed

    private void jButtonReservationCancelReservationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReservationCancelReservationActionPerformed
        // TODO add your handling code here:
        
        if((jTextReservationBookID.getText().isEmpty()) || (jTextReservationPatID.getText().isEmpty())){
        int warning = JOptionPane.showConfirmDialog(null, "Please enter ID(s).", "Attention.",
        JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);
        }
        
        else if((jTextReservationTitle.getText().isEmpty()) && (!((jTextReservationBookID.getText().isEmpty()) || (jTextCheckOutPatID.getText().isEmpty())))){
            int warning = JOptionPane.showConfirmDialog(null, "Nothing to cancel.", "Attention.",
        JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);
        }
        
        else {
            JDialog.setDefaultLookAndFeelDecorated(true);
        int response = JOptionPane.showConfirmDialog(null, "Cancel this reservation?", "Confirm",
        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        
        // close dialog if no
        if (response == JOptionPane.NO_OPTION) {
            JOptionPane.getRootFrame().dispose();
            
        // edit the patron if yes
        } else if (response == JOptionPane.YES_OPTION) {
            bookID = jTextReservationBookID.getText();
            patronID = jTextReservationPatID.getText();
            reservationStatus = "N";
            reservationID = patronID;
            reservationDate = jFormattedReservationDateCollection.getText();
            availabilityDate = currentDate;
            cancelReservation = "UPDATE book SET reserved = ?, availability = ? WHERE book_id = ?";
        
        try{
        Class.forName(JDBC_DRIVER);
        }catch(ClassNotFoundException e){}
        try{
        conn = DriverManager.getConnection(DB_URL, USER, PASS);
        stmt = conn.createStatement();
        pStmt = conn.prepareStatement(cancelReservation);
        // update the record
        
        
        pStmt.setString(1, reservationStatus);
        pStmt.setString(2, availabilityDate); 
        pStmt.setString(3, bookID);
        
        pStmt.executeUpdate();
        conn.close();
            } catch(SQLException se){}
        
        jTextReservationBookID.setText("");
        jTextReservationTitle.setText("");
        jTextReservationAuthor.setText("");
        jTextReservationPatron.setText("");
        jTextReservationPatID.setText("");
        jFormattedReservationDateCollection.setText("");
        reservationStatus = "N";
        
        
        }    
        }  
        
    }//GEN-LAST:event_jButtonReservationCancelReservationActionPerformed

    private void jButtonBookEditSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBookEditSearchActionPerformed
        // TODO add your handling code here:
        // Search for a record to edit
        
        jTextEditTitle.setText("");
        jTextEditAuthor.setText("");
        jTextEditISBN.setText("");
        
        
        try{
        Class.forName(JDBC_DRIVER);
        }catch(ClassNotFoundException e){}
        try{
        conn = DriverManager.getConnection(DB_URL, USER, PASS);
        stmt = conn.createStatement();
        bookID = jTextEditBookID.getText();
        
        
        //warn user if ID has not been entered
        if(bookID.isEmpty()){ 
           int warning = JOptionPane.showConfirmDialog(null, "Please enter an ID.", "Attention.",
            JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);
        }
        else{
                
        search = "SELECT * FROM book WHERE book_id = " + bookID + " ";
        ResultSet rs = stmt.executeQuery(search);
        
        while(rs.next()){
        jTextEditTitle.setText(rs.getString("title"));
        jTextEditAuthor.setText(rs.getString("author"));
        jTextEditISBN.setText(rs.getString("isbn"));
        jComboBoxEditCategory.setSelectedItem(rs.getString("category"));
         
        
        } // end while
        
        
        String test = jTextEditTitle.getText();
        if(test.isEmpty()){ 
           int warning = JOptionPane.showConfirmDialog(null, "No record found.", "Attention.",
            JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);
           
           status = 1;
        }
        
        
        
        }
        conn.close();
        
        
        }catch(SQLException se){}
    }//GEN-LAST:event_jButtonBookEditSearchActionPerformed

    private void jButtonBookEditCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBookEditCancelActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButtonBookEditCancelActionPerformed
     // end adding book
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BooksMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BooksMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BooksMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BooksMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {
            BooksMenu dialog = new BooksMenu(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButtonAddBook;
    private javax.swing.JButton jButtonBookEditCancel;
    private javax.swing.JButton jButtonBookEditSearch;
    private javax.swing.JButton jButtonCheckIn;
    private javax.swing.JButton jButtonCheckInCancel;
    private javax.swing.JButton jButtonCheckInSearch;
    private javax.swing.JButton jButtonCheckOut;
    private javax.swing.JButton jButtonCheckOutCancel;
    private javax.swing.JButton jButtonCheckOutPatronSearch;
    private javax.swing.JButton jButtonCheckOutSearch;
    private javax.swing.JButton jButtonReservationBookIDSearch;
    private javax.swing.JButton jButtonReservationCancel;
    private javax.swing.JButton jButtonReservationCancelReservation;
    private javax.swing.JButton jButtonReservationPatronSearch;
    private javax.swing.JButton jButtonReserve;
    private javax.swing.JComboBox<String> jComboBoxCategory;
    private javax.swing.JComboBox<String> jComboBoxEditCategory;
    private javax.swing.JFormattedTextField jFormattedCheckInDateBorrowed;
    private javax.swing.JFormattedTextField jFormattedCheckInReturnDate;
    private javax.swing.JFormattedTextField jFormattedCheckOutDate;
    private javax.swing.JFormattedTextField jFormattedCheckOutReservationDate;
    private javax.swing.JFormattedTextField jFormattedCheckOutReturnDate;
    private javax.swing.JFormattedTextField jFormattedReservationDateAvailable;
    private javax.swing.JFormattedTextField jFormattedReservationDateCollection;
    private javax.swing.JFormattedTextField jFormattedcheckOutAvailablility;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JRadioButton jRadioCheckInOverdueNo;
    private javax.swing.JRadioButton jRadioCheckInOverdueYes;
    private javax.swing.JRadioButton jRadioCheckOutNo;
    private javax.swing.JRadioButton jRadioCheckOutYes;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextAuthor;
    private javax.swing.JTextField jTextBookTitle;
    private javax.swing.JTextField jTextCheckInAuthor;
    private javax.swing.JTextField jTextCheckInBookID;
    private javax.swing.JTextField jTextCheckInBorrower;
    private javax.swing.JTextField jTextCheckInPatID;
    private javax.swing.JTextField jTextCheckInTitle;
    private javax.swing.JTextField jTextCheckOutAuthor;
    private javax.swing.JTextField jTextCheckOutBookID;
    private javax.swing.JTextField jTextCheckOutBorrower;
    private javax.swing.JTextField jTextCheckOutPatID;
    private javax.swing.JTextField jTextCheckOutTitle;
    private javax.swing.JTextField jTextDaysOverdue;
    private javax.swing.JTextField jTextEditAuthor;
    private javax.swing.JTextField jTextEditBookID;
    private javax.swing.JTextField jTextEditISBN;
    private javax.swing.JTextField jTextEditTitle;
    private javax.swing.JTextField jTextField27;
    private javax.swing.JTextField jTextField31;
    private javax.swing.JTextField jTextField32;
    private javax.swing.JTextField jTextField33;
    private javax.swing.JTextField jTextField34;
    private javax.swing.JTextField jTextISBN;
    private javax.swing.JTextField jTextPenalty;
    private javax.swing.JTextField jTextReservationAuthor;
    private javax.swing.JTextField jTextReservationBookID;
    private javax.swing.JTextField jTextReservationPatID;
    private javax.swing.JTextField jTextReservationPatron;
    private javax.swing.JTextField jTextReservationTitle;
    // End of variables declaration//GEN-END:variables
   
    

}
